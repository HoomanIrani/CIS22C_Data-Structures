/*
 Student: Houman Irani, Mahbod Mohebi
 Proffesor: Dr. Kamran Eftekhari
 CIS 22C
 De Anza College Summer 2019
 Description:    Final Project
 
 For this final programming project I implemented the Disjoint Sets, Stack, Queue, and Graph
 data structures to create a program that solves mazes that are either generated randomly or
 generated by hand following a certain format as specified in the assignment specifications.
 To solve the maze we populate our graph with data that indicates which of our rooms in the
 maze are neighbors to one another, and then use BFS and DFS algorithms to find the shortest
 path from the start room to finish room.
 
 */





#ifndef GRAPH_H 
#define GRAPH_H


#include <iostream>


using namespace std;




class Graph	// This data structure serves as an adjacency matrix storing weights between neighbors
{

private:
	int** adjArr; 	// 2-d array to store weights between all rooms, with 1 indicating neighbors, and >1 indicating non-neighbor
	int arrDim;		// array dimension size

public:
	Graph(int dim);		// initialize all nodes as non-neighbors with weight of dim * dim
	bool setNeighbors(int neighbor1, int neighbor2);	// if two nodes are neighbors then record weight as 1
	bool isNeighbor(int neighbor1, int neighbor2);		// return true if both are neighbors, false otherwise
	void printGraph();
};



#endif
